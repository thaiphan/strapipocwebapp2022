import type { GetStaticPaths, GetStaticProps } from "next";
import Head from "next/head";
import styles from "styles/Home.module.css";
import { Gallery } from "modules/Gallery";
import { Franchise } from "modules/Franchise";
import { RichText } from "modules/RichText";
import { Copy } from "modules/Copy";
import {
  getAllPagePaths,
  getPageBySlug,
  type Page as PageProps,
} from "lib/strapi";

export default function Page(props: PageProps["attributes"]) {
  return (
    <>
      <Head>
        <title>{props.Title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {props.Sections.map((section) => {
          switch (section.__component) {
            case "common.copy":
              return <Copy key={section.id} {...section} />;
            case "common.rich-text":
              return <RichText key={section.id} {...section} />;
            case "common.franchise":
              return <Franchise key={section.id} {...section} />;
            case "common.gallery": {
              return <Gallery key={section.id} {...section} />;
            }
            default:
              return null;
          }
        })}
      </main>
    </>
  );
}

export const getStaticPaths: GetStaticPaths = async (props) => {
  const pagePaths = await getAllPagePaths();

  return {
    paths: pagePaths.map((slug) => ({
      params: {
        slug,
      },
    })),
    fallback: "blocking",
  };
};

export const getStaticProps: GetStaticProps<
  PageProps["attributes"],
  { slug: string }
> = async (props) => {
  if (!props.params?.slug) {
    return {
      notFound: true,
      revalidate: 30,
    };
  }

  const response = await getPageBySlug(props.params.slug, props.locale);

  console.log(response);

  if (response.data.length === 0) {
    return {
      notFound: true,
      revalidate: 30,
    };
  }

  const entry = response.data[0];

  return {
    props: entry.attributes,
    revalidate: 30,
  };
};
