import { GetStaticPaths, GetStaticProps } from "next";
import Head from "next/head";
import { contentfulClient } from "lib/contentful";
import styles from "styles/Home.module.css";
import { type Document } from "@contentful/rich-text-types";
import stringify from "fast-safe-stringify";
import { Gallery } from "modules/Gallery";
import { Franchise } from "modules/Franchise";
import { RichText } from "modules/RichText";
import { Copy } from "modules/Copy";
import Link from "next/link";
import { useRouter } from "next/router";

interface HomeProps {
  id: string;
  slug: string;
  title: string;
  sections: Section[];
}

type Section =
  | {
      id: string;
      title: string;
      description: Document;
      type: "componentRichText";
    }
  | {
      id: string;
      title: string;
      description: Document;
      type: "componentCopy";
    }
  | {
      id: string;
      title: string;
      description: Document;
      type: "componentFranchise";
    }
  | {
      id: string;
      photos: {
        url: string;
        width: number;
        height: number;
      }[];
      type: "componentGallery";
    };

export default function Home(props: HomeProps) {
  const router = useRouter();

  return (
    <>
      <Head>
        <title>{props.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className={styles.header}>
        <div className={styles.container}>
          <ul className={styles.nav}>
            <li>
              <Link href="/">Home</Link>
            </li>
            <li>
              <Link href="/about">About</Link>
            </li>
          </ul>
          <Link href="/" locale={router.locale === "en" ? "fr" : "en"}>
            {router.locale === "en" ? "FR" : "EN"}
          </Link>
        </div>
      </header>

      <main className={styles.main}>
        {props.sections.map((section) => {
          switch (section.type) {
            case "componentCopy":
              return <Copy key={section.id} {...section} />;
            case "componentRichText":
              return <RichText key={section.id} {...section} />;
            case "componentFranchise":
              return <Franchise key={section.id} {...section} />;
            case "componentGallery": {
              return <Gallery key={section.id} {...section} />;
            }
            default:
              return null;
          }
        })}
      </main>
    </>
  );
}

interface ContentfulPage {
  slug: string;
  title: string;
  sections?: ContentfulPageSection[];
}

type ContentfulPageSection =
  | ContentfulPageSectionCopy
  | ContentfulPageSectionRichText
  | ContentfulPageSectionFranchise
  | ContentfulPageSectionGallery;

interface ContentfulPageSectionRichText {
  fields: {
    title: string;
    description: Document;
  };
  sys: {
    id: string;
    contentType: {
      sys: {
        id: "componentRichText";
      };
    };
  };
}

interface ContentfulPageSectionFranchise {
  fields: {
    title: string;
    description: Document;
  };
  sys: {
    id: string;
    contentType: {
      sys: {
        id: "componentFranchise";
      };
    };
  };
}

interface ContentfulPageSectionCopy {
  fields: {
    title: string;
    description: Document;
  };
  sys: {
    id: string;
    contentType: {
      sys: {
        id: "componentCopy";
      };
    };
  };
}

interface ContentfulPageSectionGallery {
  fields: {
    photos: {
      fields: {
        title: string;
        description: string;
        file: {
          url: string;
          details: {
            image: {
              width: number;
              height: number;
            };
          };
        };
      };
    }[];
  };
  sys: {
    id: string;
    contentType: {
      sys: {
        id: "componentGallery";
      };
    };
  };
}

export const getStaticPaths: GetStaticPaths = async (props) => {
  const entries = await contentfulClient.getEntries<ContentfulPage>({
    content_type: "page",
  });

  return {
    paths: entries.items.map((item) => ({
      params: {
        slug: item.fields.slug.split("/").filter((value) => value !== ""),
      },
    })),
    fallback: "blocking",
  };
};

export const getStaticProps: GetStaticProps<
  HomeProps,
  { slug: string[] }
> = async (props) => {
  const response = await contentfulClient.getEntries<ContentfulPage>({
    content_type: "page",
    "fields.slug": props.params?.slug ? props.params.slug.join("/") : "/",
    limit: 1,
    include: 2,
    locale: props.locale,
  });

  if (response.items.length === 0) {
    return {
      notFound: true,
      revalidate: 10,
    };
  }

  const entry = response.items[0];

  return {
    props: {
      ...entry.fields,
      id: entry.sys.id,
      // TODO: Identify nicer way to do this
      sections: entry.fields.sections
        ? entry.fields.sections.map((section) => {
            if (isRichTextSection(section)) {
              // Hack to resolve circular dependency issue
              const fields: typeof section.fields = JSON.parse(
                stringify(section.fields)
              );

              return {
                ...fields,
                id: section.sys.id,
                type: section.sys.contentType.sys.id,
              };
            } else if (isCopySection(section)) {
              // Hack to resolve circular dependency issue
              const fields: typeof section.fields = JSON.parse(
                stringify(section.fields)
              );

              return {
                ...fields,
                id: section.sys.id,
                type: section.sys.contentType.sys.id,
              };
            } else if (isFranchiseSection(section)) {
              // Hack to resolve circular dependency issue
              const fields: typeof section.fields = JSON.parse(
                stringify(section.fields)
              );

              return {
                ...fields,
                id: section.sys.id,
                type: section.sys.contentType.sys.id,
              };
            } else {
              // Hack to resolve circular dependency issue
              const fields: typeof section.fields = JSON.parse(
                stringify(section.fields)
              );

              return {
                ...fields,
                id: section.sys.id,
                type: section.sys.contentType.sys.id,
                photos: fields.photos.map((photo) => ({
                  url: photo.fields.file.url,
                  width: photo.fields.file.details.image.width,
                  height: photo.fields.file.details.image.height,
                })),
              };
            }
          })
        : [],
    },
    revalidate: 10,
  };
};

const isRichTextSection = (
  b: ContentfulPageSection
): b is ContentfulPageSectionRichText =>
  b.sys.contentType.sys.id === "componentRichText";

const isCopySection = (
  b: ContentfulPageSection
): b is ContentfulPageSectionCopy =>
  b.sys.contentType.sys.id === "componentCopy";

const isFranchiseSection = (
  b: ContentfulPageSection
): b is ContentfulPageSectionFranchise =>
  b.sys.contentType.sys.id === "componentFranchise";
