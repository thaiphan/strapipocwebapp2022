import { GetStaticPaths, GetStaticProps } from "next";
import Head from "next/head";
import { contentfulClient } from "lib/contentful";
import styles from "styles/Home.module.css";
import { type Document } from "@contentful/rich-text-types";
import stringify from "fast-safe-stringify";
import { RichText } from "components/RichText";

interface HomeProps {
  id: string;
  slug: string;
  title: string;
  sections: Section[];
}

interface Section {
  id: string;
  title: string;
  description: Document;
  type: "componentFranchise";
}

export default function Home(props: HomeProps) {
  return (
    <div className={styles.container}>
      <Head>
        <title>{props.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {props.sections.map((section) => {
          switch (section.type) {
            case "componentFranchise":
              return (
                <section key={section.id}>
                  <h2>{section.title}</h2>
                  <RichText field={section.description} />
                </section>
              );
            default:
              return null;
          }
        })}
      </main>
    </div>
  );
}

interface Page {
  slug: string;
  title: string;
  sections?: {
    fields: {
      title: string;
      description: Document;
    };
    sys: {
      id: string;
      contentType: {
        sys: {
          id: "componentFranchise";
        };
      };
    };
  }[];
}

export const getStaticPaths: GetStaticPaths = async (props) => {
  const entries = await contentfulClient.getEntries<Page>({
    content_type: "page",
  });

  return {
    paths: entries.items.map((item) => ({
      params: {
        slug: item.fields.slug.split("/").filter((value) => value !== ""),
      },
    })),
    fallback: "blocking",
  };
};

export const getStaticProps: GetStaticProps<
  HomeProps,
  { slug: string[] }
> = async (props) => {
  const response = await contentfulClient.getEntries<Page>({
    content_type: "page",
    "fields.slug": props.params?.slug ? props.params.slug.join("/") : "/",
    limit: 1,
    include: 2,
  });

  if (response.items.length === 0) {
    return {
      notFound: true,
    };
  }

  const entry = response.items[0];

  return {
    props: {
      ...entry.fields,
      id: entry.sys.id,
      sections: entry.fields.sections
        ? entry.fields.sections.map((section) => {
            // Hack to resolve circular dependency issue
            const description = JSON.parse(
              stringify(section.fields.description)
            );

            return {
              id: section.sys.id,
              type: section.sys.contentType.sys.id,
              title: section.fields.title,
              description: description,
            };
          })
        : [],
    },
  };
};
